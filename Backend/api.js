const httpsPort = 3002; // D√©finit le port HTTPS
const express = require('express');
const mysql = require('mysql2');
const app = express();
const port = 3000;
const fs = require('fs');
const https = require('https');
app.use(express.json()); // Middleware pour parser le JSON

// Charger les certificats SSL

const sslOptions = {
    key: fs.readFileSync('/etc/ssl/private/selfsigned.key'),
    cert: fs.readFileSync('/etc/ssl/certs/selfsigned.crt')
};


// Connexion √† la base de donn√©es MySQL
const db = mysql.createConnection({
    host: 'localhost',
    user: 'tpreseau', // Remplace par ton utilisateur MySQL
    password: 'tpreseau', // Remplace par ton mot de passe MySQL
    database: 'biketrack'
});

db.connect(err => {
    if (err) {
        console.error('Erreur de connexion √† MySQL :', err);
        return;
    }
    console.log('Connect√© √† MySQL');
});

// ========================= ROUTES =========================

// Route de test
app.get('/', (req, res) => {
    res.send('API BikeTrack est en ligne üö¥‚Äç‚ôÇÔ∏è!');
});

// ROUTE POUR RECUPERER DONNEES GPS EN FCT DE L'UUID
app.get('/gps/:UUID', (req, res) => {
    const { UUID } = req.params;

    db.query('SELECT gps, timestamp FROM localisation WHERE UUID_velo = ?', [UUID], (err, results) => {
        if (err) {
            res.status(500).json({ error: err.message });
        } else if (results.length === 0) {
            res.status(404).json({ message: "Aucune donn√©e GPS trouv√©e pour cet UUID" });
        } else {
            res.json(results);
        }
    });
});


// ‚úÖ Inscription d'un utilisateur avec enregistrement du v√©lo
app.post('/register', (req, res) => {
    const { UUID_velo, pseudo, email, psw, nom_module, pin } = req.body;

    if (!pseudo || !email || !psw) {
        return res.status(400).json({ message: "Pseudo, email et mot de passe sont requis" });
    }

    db.query('INSERT INTO user (UUID_velo, pseudo, email, psw) VALUES (?, ?, ?, ?)',
        [UUID_velo || null, pseudo, email, psw],
        (err, userResult) => {
            if (err) {
                res.status(500).json({ error: err.message });
            } else {
                if (UUID_velo) {
                    db.query('INSERT INTO velo (UUID, nom_module, pin) VALUES (?, ?, ?)',
                        [UUID_velo, nom_module || null, pin || null],
                        (err, veloResult) => {
                            if (err) {
                                res.status(500).json({ error: err.message });
                            } else {
                                res.json({
                                    message: 'Utilisateur et v√©lo enregistr√©s avec succ√®s',
                                    user_id: userResult.insertId,
                                    velo_id: veloResult.insertId
                                });
                            }
                        }
                    );
                } else {
                    res.json({
                        message: 'Utilisateur enregistr√© avec succ√®s',
                        user_id: userResult.insertId
                    });
                }
            }
        }
    );
});
// ‚úÖ Changer le statut d'un v√©lo en vol√©
app.put('/velo/vole/:UUID', (req, res) => {
    const { UUID } = req.params;
    const { user_id } = req.body; // ID de l'utilisateur connect√©

    if (!user_id) {
        return res.status(400).json({ message: "L'ID utilisateur est requis" });
    }

    // V√©rifier que le v√©lo appartient √† cet utilisateur
    db.query('SELECT * FROM velo WHERE UUID = ? AND user_id = ?', [UUID, user_id], (err, results) => {
        if (err) {
            res.status(500).json({ error: err.message });
        } else if (results.length === 0) {
            res.status(403).json({ message: "Action non autoris√©e. Ce v√©lo ne vous appartient pas." });
        } else {
            // Mise √† jour du statut
            db.query('UPDATE velo SET statut = 1 WHERE UUID = ?', [UUID], (err, result) => {
                if (err) {
                    res.status(500).json({ error: err.message });
                } else {
                    res.json({ message: `Le v√©lo ${UUID} est maintenant marqu√© comme vol√©.` });
                }
            });
        }
    });
});

// ‚úÖ Changer le statut d'un v√©lo en retrouv√© (s√©curis√© par user_id)
app.put('/velo/retrouve/:UUID', (req, res) => {
    const { UUID } = req.params;
    const { user_id } = req.body;

    if (!user_id) {
        return res.status(400).json({ message: "L'ID utilisateur est requis" });
    }

    // V√©rifier que l'utilisateur est bien le propri√©taire du v√©lo
    db.query('SELECT * FROM velo WHERE UUID = ? AND user_id = ?', [UUID, user_id], (err, results) => {
        if (err) {
            res.status(500).json({ error: err.message });
        } else if (results.length === 0) {
            res.status(403).json({ message: "Action non autoris√©e. Ce v√©lo ne vous appartient pas." });
        } else {
            // Mise √† jour du statut
            db.query('UPDATE velo SET statut = 0 WHERE UUID = ?', [UUID], (err, result) => {
                if (err) {
                    res.status(500).json({ error: err.message });
                } else {
                    res.json({ message: `Le v√©lo ${UUID} a √©t√© retrouv√©.` });
                }
            });
        }
    });
});
// ‚úÖ Enregistrer les donn√©es GPS apr√®s v√©rification de l'UUID
app.post('/gps/test', (req, res) => {
	const { UUID_velo, gps } = req.body;

	if (!UUID_velo || !gps) {
    	return res.status(400).json({ message: "UUID_velo et gps sont requis" });
	}

	// V√©rifier si l'UUID_velo existe dans la base
	db.query('SELECT UUID FROM velo WHERE UUID = ?', [UUID_velo], (err, results) => {
    	if (err) {
        	res.status(500).json({ error: err.message });
    	} else if (results.length === 0) {
        	res.status(404).json({ message: "UUID_velo non trouv√© dans la base de donn√©es" });
    	} else {
        	// Ins√©rer la localisation
        	db.query('INSERT INTO localisation (UUID_velo, gps) VALUES (?, ?)',
            	[UUID_velo, gps],
            	(err, result) => {
                	if (err) {
                    	res.status(500).json({ error: err.message });
                	} else {
                    	res.json({ message: "Localisation ajout√©e avec succ√®s", id: result.insertId });
                	}
            	}
        	);
    	}
	});
});

// ‚úÖ R√©cup√©rer le statut d'un v√©lo li√© √† un utilisateur
app.get('/velo/statut/:UUID', (req, res) => {
	const { UUID } = req.params;

	db.query('SELECT statut FROM velo WHERE UUID = ?', [UUID], (err, results) => {
    	if (err) {
        	res.status(500).json({ error: err.message });
    	} else if (results.length === 0) {
        	res.status(404).json({ message: "UUID non trouv√©" });
    	} else {
        	res.json({ UUID, statut: results[0].statut });
    	}
	});
});

// ‚úÖ Lier un UUID √† un utilisateur
app.post('/user/velo', (req, res) => {
	const { user_id, UUID_velo } = req.body;

	if (!user_id || !UUID_velo) {
    	return res.status(400).json({ message: "L'ID utilisateur et l'UUID du v√©lo sont requis" });
	}

	db.query('UPDATE user SET UUID_velo = ? WHERE id = ?', [UUID_velo, user_id], (err, result) => {
    	if (err) {
        	res.status(500).json({ error: err.message });
    	} else {
        	res.json({ message: `V√©lo ${UUID_velo} li√© √† l'utilisateur ${user_id}` });
    	}
	});
});

// ‚úÖ M√©thode de connexion avec v√©rification des identifiants
app.post('/login', (req, res) => {
	const { email, psw } = req.body;

	if (!email || !psw) {
    	return res.status(400).json({ message: "Email et mot de passe requis" });
	}

	db.query('SELECT id, UUID_velo, pseudo FROM user WHERE email = ? AND psw = ?',
    	[email, psw],
    	(err, results) => {
        	if (err) {
            	res.status(500).json({ error: err.message });
        	} else if (results.length === 0) {
            	res.status(401).json({ message: "Identifiants incorrects" });
        	} else {
            	res.json({ message: "Connexion r√©ussie", user: results[0] });
        	}
    	}
	);
});

// ‚úÖ Enregistrer les donn√©es GPS uniquement si le v√©lo est vol√©
app.post('/gps', (req, res) => {
    const { UUID_velo, gps } = req.body;

    if (!UUID_velo || !gps) {
        return res.status(400).json({ message: "UUID_velo et gps sont requis" });
    }

    // V√©rifier si l'UUID_velo existe et r√©cup√©rer son statut
    db.query('SELECT statut FROM velo WHERE UUID = ?', [UUID_velo], (err, results) => {
        if (err) {
            res.status(500).json({ error: err.message });
        } else if (results.length === 0) {
            res.status(404).json({ message: "UUID_velo non trouv√© dans la base de donn√©es" });
        } else {
            const statut = results[0].statut;
            
            // Si le v√©lo est vol√©, ins√©rer la localisation
            if (statut === 1) {
                db.query('INSERT INTO localisation (UUID_velo, gps) VALUES (?, ?)',
                    [UUID_velo, gps],
                    (err, result) => {
                        if (err) {
                            res.status(500).json({ error: err.message });
                        } else {
                            res.json({ 
                                message: "Localisation ajout√©e car le v√©lo est d√©clar√© vol√©", 
                                id: result.insertId, 
                                statut_vol: "Attention, ce v√©lo est d√©clar√© vol√©" 
                            });
                        }
                    }
                );
            } else {
                res.json({ message: "Le v√©lo n'est pas vol√©, aucune localisation enregistr√©e." });
            }
        }
    });
});

// Lancer le serveur HTTP
//app.listen(port, () => {
//    console.log(`API REST d√©marr√©e en HTTP sur http://localhost:${port}`);
//});

// Lancer le serveur HTTPS
https.createServer(sslOptions, app).listen(httpsPort, '0.0.0.0', () => {
    console.log(`API REST d√©marr√©e en HTTPS sur https://13.36.126.63`);
});
