name: Deploy to Amazon ECS

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: eu-west-3                        # La région AWS (Europe Paris)
  ECR_REPOSITORY: biketrack-repo1              # Nom de votre repository ECR
  ECS_SERVICE: github-task-service             # Nom du service ECS à déployer
  ECS_CLUSTER: bytrack-cluster                 # Nom de votre cluster ECS
  ECS_TASK_DEFINITION: github-task            # Nom de votre définition de tâche ECS
  CONTAINER_NAME: github-task-container       # Nom du conteneur dans la définition de tâche

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}  # Utilisation de l'ID de commit comme tag d'image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS Task Definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: arn:aws:ecs:eu-west-3:619071335751:task-definition/github-task:1  # Utilisation de votre définition de tâche
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy updated ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
